// Code generated by yaprotoc. DO NOT EDIT.
// source: channel/msgpush.proto

package channel

import (
	"github.com/pkg/errors"
	"github.com/segmentio/encoding/proto"
)

type FocusInfo struct {
	ChannelIdList []uint64 `protobuf:"varint,1,rep"`
}

func (x *FocusInfo) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type MsgOnlinePush struct {
	Msgs         []*ChannelMsgContent `protobuf:"bytes,1,rep"`
	GeneralFlag  *uint32              `protobuf:"varint,2,opt"`
	NeedResp     *uint32              `protobuf:"varint,3,opt"`
	ServerBuf    []byte               `protobuf:"bytes,4,opt"`
	CompressFlag *uint32              `protobuf:"varint,5,opt"`
	CompressMsg  []byte               `protobuf:"bytes,6,opt"`
	FocusInfo    *FocusInfo           `protobuf:"bytes,7,opt"`
	HugeFlag     *uint32              `protobuf:"varint,8,opt"`
}

func (x *MsgOnlinePush) GetGeneralFlag() uint32 {
	if x != nil && x.GeneralFlag != nil {
		return *x.GeneralFlag
	}
	return 0
}

func (x *MsgOnlinePush) GetNeedResp() uint32 {
	if x != nil && x.NeedResp != nil {
		return *x.NeedResp
	}
	return 0
}

func (x *MsgOnlinePush) GetCompressFlag() uint32 {
	if x != nil && x.CompressFlag != nil {
		return *x.CompressFlag
	}
	return 0
}

func (x *MsgOnlinePush) GetHugeFlag() uint32 {
	if x != nil && x.HugeFlag != nil {
		return *x.HugeFlag
	}
	return 0
}

func (x *MsgOnlinePush) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type MsgPushResp struct {
	ServerBuf []byte `protobuf:"bytes,1,opt"`
}

func (x *MsgPushResp) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type PressMsg struct {
	Msgs []*ChannelMsgContent `protobuf:"bytes,1,rep"`
}

func (x *PressMsg) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type ServerBuf struct {
	SvrIp   *uint32 `protobuf:"varint,1,opt"`
	SvrPort *uint32 `protobuf:"varint,2,opt"`
	EchoKey []byte  `protobuf:"bytes,3,opt"`
}

func (x *ServerBuf) GetSvrIp() uint32 {
	if x != nil && x.SvrIp != nil {
		return *x.SvrIp
	}
	return 0
}

func (x *ServerBuf) GetSvrPort() uint32 {
	if x != nil && x.SvrPort != nil {
		return *x.SvrPort
	}
	return 0
}

func (x *ServerBuf) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}
