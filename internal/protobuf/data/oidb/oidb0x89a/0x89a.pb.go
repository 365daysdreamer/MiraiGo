// Code generated by yaprotoc. DO NOT EDIT.
// source: oidb/0x89a.proto

package oidb0x89a

import (
	"github.com/pkg/errors"
	"github.com/segmentio/encoding/proto"
)

type GroupCardPrefix struct {
	Introduction []byte   `protobuf:"bytes,1,opt"`
	Prefix       [][]byte `protobuf:"bytes,2,rep"`
}

func (x *GroupCardPrefix) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type GroupExInfoOnly struct {
	TribeId          *uint32 `protobuf:"varint,1,opt"`
	MoneyForAddGroup *uint32 `protobuf:"varint,2,opt"`
}

func (x *GroupExInfoOnly) GetTribeId() uint32 {
	if x != nil && x.TribeId != nil {
		return *x.TribeId
	}
	return 0
}

func (x *GroupExInfoOnly) GetMoneyForAddGroup() uint32 {
	if x != nil && x.MoneyForAddGroup != nil {
		return *x.MoneyForAddGroup
	}
	return 0
}

func (x *GroupExInfoOnly) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type GroupGeoInfo struct {
	CityId     *uint32 `protobuf:"varint,1,opt"`
	Longtitude *uint64 `protobuf:"varint,2,opt"`
	Latitude   *uint64 `protobuf:"varint,3,opt"`
	GeoContent []byte  `protobuf:"bytes,4,opt"`
	PoiId      *uint64 `protobuf:"varint,5,opt"`
}

func (x *GroupGeoInfo) GetCityId() uint32 {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return 0
}

func (x *GroupGeoInfo) GetLongtitude() uint64 {
	if x != nil && x.Longtitude != nil {
		return *x.Longtitude
	}
	return 0
}

func (x *GroupGeoInfo) GetLatitude() uint64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *GroupGeoInfo) GetPoiId() uint64 {
	if x != nil && x.PoiId != nil {
		return *x.PoiId
	}
	return 0
}

func (x *GroupGeoInfo) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type GroupInfo struct {
	GroupExtAdmNum       *uint32                 `protobuf:"varint,1,opt"`
	Flag                 *uint32                 `protobuf:"varint,2,opt"`
	GroupName            []byte                  `protobuf:"bytes,3,opt"`
	GroupMemo            []byte                  `protobuf:"bytes,4,opt"`
	GroupFingerMemo      []byte                  `protobuf:"bytes,5,opt"`
	GroupAioSkinUrl      []byte                  `protobuf:"bytes,6,opt"`
	GroupBoardSkinUrl    []byte                  `protobuf:"bytes,7,opt"`
	GroupCoverSkinUrl    []byte                  `protobuf:"bytes,8,opt"`
	GroupGrade           *uint32                 `protobuf:"varint,9,opt"`
	ActiveMemberNum      *uint32                 `protobuf:"varint,10,opt"`
	CertificationType    *uint32                 `protobuf:"varint,11,opt"`
	CertificationText    []byte                  `protobuf:"bytes,12,opt"`
	GroupRichFingerMemo  []byte                  `protobuf:"bytes,13,opt"`
	StGroupNewguidelines *GroupNewGuidelinesInfo `protobuf:"bytes,14,opt"`
	GroupFace            *uint32                 `protobuf:"varint,15,opt"`
	AddOption            *uint32                 `protobuf:"varint,16,opt"`
	ShutupTime           *uint32                 `protobuf:"varint,17,opt"`
	GroupTypeFlag        *uint32                 `protobuf:"varint,18,opt"`
	GroupTag             [][]byte                `protobuf:"bytes,19,rep"`
	GroupGeoInfo         *GroupGeoInfo           `protobuf:"bytes,20,opt"`
	GroupClassExt        *uint32                 `protobuf:"varint,21,opt"`
	GroupClassText       []byte                  `protobuf:"bytes,22,opt"`
	AppPrivilegeFlag     *uint32                 `protobuf:"varint,23,opt"`
	AppPrivilegeMask     *uint32                 `protobuf:"varint,24,opt"`
	StGroupExInfo        *GroupExInfoOnly        `protobuf:"bytes,25,opt"`
	GroupSecLevel        *uint32                 `protobuf:"varint,26,opt"`
	GroupSecLevelInfo    *uint32                 `protobuf:"varint,27,opt"`
	SubscriptionUin      *uint64                 `protobuf:"varint,28,opt"`
	AllowMemberInvite    *uint32                 `protobuf:"varint,29,opt"`
	GroupQuestion        []byte                  `protobuf:"bytes,30,opt"`
	GroupAnswer          []byte                  `protobuf:"bytes,31,opt"`
	GroupFlagext3        *uint32                 `protobuf:"varint,32,opt"`
	GroupFlagext3Mask    *uint32                 `protobuf:"varint,33,opt"`
	GroupOpenAppid       *uint32                 `protobuf:"varint,34,opt"`
	NoFingerOpenFlag     *uint32                 `protobuf:"varint,35,opt"`
	NoCodeFingerOpenFlag *uint32                 `protobuf:"varint,36,opt"`
	RootId               *uint64                 `protobuf:"varint,37,opt"`
	MsgLimitFrequency    *uint32                 `protobuf:"varint,38,opt"`
	HlGuildAppid         *uint32                 `protobuf:"varint,39,opt"`
	HlGuildSubType       *uint32                 `protobuf:"varint,40,opt"`
	HlGuildOrgid         *uint32                 `protobuf:"varint,41,opt"`
	GroupFlagext4        *uint32                 `protobuf:"varint,42,opt"`
	GroupFlagext4Mask    *uint32                 `protobuf:"varint,43,opt"`
	GroupSchoolInfo      []byte                  `protobuf:"bytes,44,opt"`
	StGroupCardPrefix    *GroupCardPrefix        `protobuf:"bytes,45,opt"`
}

func (x *GroupInfo) GetGroupExtAdmNum() uint32 {
	if x != nil && x.GroupExtAdmNum != nil {
		return *x.GroupExtAdmNum
	}
	return 0
}

func (x *GroupInfo) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *GroupInfo) GetGroupGrade() uint32 {
	if x != nil && x.GroupGrade != nil {
		return *x.GroupGrade
	}
	return 0
}

func (x *GroupInfo) GetActiveMemberNum() uint32 {
	if x != nil && x.ActiveMemberNum != nil {
		return *x.ActiveMemberNum
	}
	return 0
}

func (x *GroupInfo) GetCertificationType() uint32 {
	if x != nil && x.CertificationType != nil {
		return *x.CertificationType
	}
	return 0
}

func (x *GroupInfo) GetGroupFace() uint32 {
	if x != nil && x.GroupFace != nil {
		return *x.GroupFace
	}
	return 0
}

func (x *GroupInfo) GetAddOption() uint32 {
	if x != nil && x.AddOption != nil {
		return *x.AddOption
	}
	return 0
}

func (x *GroupInfo) GetShutupTime() uint32 {
	if x != nil && x.ShutupTime != nil {
		return *x.ShutupTime
	}
	return 0
}

func (x *GroupInfo) GetGroupTypeFlag() uint32 {
	if x != nil && x.GroupTypeFlag != nil {
		return *x.GroupTypeFlag
	}
	return 0
}

func (x *GroupInfo) GetGroupClassExt() uint32 {
	if x != nil && x.GroupClassExt != nil {
		return *x.GroupClassExt
	}
	return 0
}

func (x *GroupInfo) GetAppPrivilegeFlag() uint32 {
	if x != nil && x.AppPrivilegeFlag != nil {
		return *x.AppPrivilegeFlag
	}
	return 0
}

func (x *GroupInfo) GetAppPrivilegeMask() uint32 {
	if x != nil && x.AppPrivilegeMask != nil {
		return *x.AppPrivilegeMask
	}
	return 0
}

func (x *GroupInfo) GetGroupSecLevel() uint32 {
	if x != nil && x.GroupSecLevel != nil {
		return *x.GroupSecLevel
	}
	return 0
}

func (x *GroupInfo) GetGroupSecLevelInfo() uint32 {
	if x != nil && x.GroupSecLevelInfo != nil {
		return *x.GroupSecLevelInfo
	}
	return 0
}

func (x *GroupInfo) GetSubscriptionUin() uint64 {
	if x != nil && x.SubscriptionUin != nil {
		return *x.SubscriptionUin
	}
	return 0
}

func (x *GroupInfo) GetAllowMemberInvite() uint32 {
	if x != nil && x.AllowMemberInvite != nil {
		return *x.AllowMemberInvite
	}
	return 0
}

func (x *GroupInfo) GetGroupFlagext3() uint32 {
	if x != nil && x.GroupFlagext3 != nil {
		return *x.GroupFlagext3
	}
	return 0
}

func (x *GroupInfo) GetGroupFlagext3Mask() uint32 {
	if x != nil && x.GroupFlagext3Mask != nil {
		return *x.GroupFlagext3Mask
	}
	return 0
}

func (x *GroupInfo) GetGroupOpenAppid() uint32 {
	if x != nil && x.GroupOpenAppid != nil {
		return *x.GroupOpenAppid
	}
	return 0
}

func (x *GroupInfo) GetNoFingerOpenFlag() uint32 {
	if x != nil && x.NoFingerOpenFlag != nil {
		return *x.NoFingerOpenFlag
	}
	return 0
}

func (x *GroupInfo) GetNoCodeFingerOpenFlag() uint32 {
	if x != nil && x.NoCodeFingerOpenFlag != nil {
		return *x.NoCodeFingerOpenFlag
	}
	return 0
}

func (x *GroupInfo) GetRootId() uint64 {
	if x != nil && x.RootId != nil {
		return *x.RootId
	}
	return 0
}

func (x *GroupInfo) GetMsgLimitFrequency() uint32 {
	if x != nil && x.MsgLimitFrequency != nil {
		return *x.MsgLimitFrequency
	}
	return 0
}

func (x *GroupInfo) GetHlGuildAppid() uint32 {
	if x != nil && x.HlGuildAppid != nil {
		return *x.HlGuildAppid
	}
	return 0
}

func (x *GroupInfo) GetHlGuildSubType() uint32 {
	if x != nil && x.HlGuildSubType != nil {
		return *x.HlGuildSubType
	}
	return 0
}

func (x *GroupInfo) GetHlGuildOrgid() uint32 {
	if x != nil && x.HlGuildOrgid != nil {
		return *x.HlGuildOrgid
	}
	return 0
}

func (x *GroupInfo) GetGroupFlagext4() uint32 {
	if x != nil && x.GroupFlagext4 != nil {
		return *x.GroupFlagext4
	}
	return 0
}

func (x *GroupInfo) GetGroupFlagext4Mask() uint32 {
	if x != nil && x.GroupFlagext4Mask != nil {
		return *x.GroupFlagext4Mask
	}
	return 0
}

func (x *GroupInfo) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type GroupNewGuidelinesInfo struct {
	Enabled *bool  `protobuf:"varint,1,opt"`
	Content []byte `protobuf:"bytes,2,opt"`
}

func (x *GroupNewGuidelinesInfo) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *GroupNewGuidelinesInfo) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type GroupSchoolInfo struct {
	Location []byte  `protobuf:"bytes,1,opt"`
	Grade    *uint32 `protobuf:"varint,2,opt"`
	School   []byte  `protobuf:"bytes,3,opt"`
}

func (x *GroupSchoolInfo) GetGrade() uint32 {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return 0
}

func (x *GroupSchoolInfo) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type ReqBody struct {
	GroupCode           *uint64    `protobuf:"varint,1,opt"`
	StGroupInfo         *GroupInfo `protobuf:"bytes,2,opt"`
	OriginalOperatorUin *uint64    `protobuf:"varint,3,opt"`
	ReqGroupOpenAppid   *uint32    `protobuf:"varint,4,opt"`
}

func (x *ReqBody) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *ReqBody) GetOriginalOperatorUin() uint64 {
	if x != nil && x.OriginalOperatorUin != nil {
		return *x.OriginalOperatorUin
	}
	return 0
}

func (x *ReqBody) GetReqGroupOpenAppid() uint32 {
	if x != nil && x.ReqGroupOpenAppid != nil {
		return *x.ReqGroupOpenAppid
	}
	return 0
}

func (x *ReqBody) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type RspBody struct {
	GroupCode *uint64 `protobuf:"varint,1,opt"`
	Errorinfo []byte  `protobuf:"bytes,2,opt"`
}

func (x *RspBody) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *RspBody) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}
