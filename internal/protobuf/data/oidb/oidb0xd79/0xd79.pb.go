// Code generated by yaprotoc. DO NOT EDIT.
// source: oidb/0xd79.proto

package oidb0xd79

import (
	"github.com/pkg/errors"
	"github.com/segmentio/encoding/proto"
)

type Content struct {
	SliceContent [][]byte `protobuf:"bytes,1,rep"`
}

func (x *Content) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type ReqBody struct {
	Seq          *uint64 `protobuf:"varint,1,opt"`
	Uin          *uint64 `protobuf:"varint,2,opt"`
	CompressFlag *uint32 `protobuf:"varint,3,opt"`
	Content      []byte  `protobuf:"bytes,4,opt"`
	SenderUin    *uint64 `protobuf:"varint,5,opt"`
	Qua          []byte  `protobuf:"bytes,6,opt"`
	WordExt      []byte  `protobuf:"bytes,7,opt"`
}

func (x *ReqBody) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *ReqBody) GetUin() uint64 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *ReqBody) GetCompressFlag() uint32 {
	if x != nil && x.CompressFlag != nil {
		return *x.CompressFlag
	}
	return 0
}

func (x *ReqBody) GetSenderUin() uint64 {
	if x != nil && x.SenderUin != nil {
		return *x.SenderUin
	}
	return 0
}

func (x *ReqBody) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}

type RspBody struct {
	Ret          *uint32  `protobuf:"varint,1,opt"`
	Seq          *uint64  `protobuf:"varint,2,opt"`
	Uin          *uint64  `protobuf:"varint,3,opt"`
	CompressFlag *uint32  `protobuf:"varint,4,opt"`
	Content      *Content `protobuf:"bytes,5,opt"`
}

func (x *RspBody) GetRet() uint32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *RspBody) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *RspBody) GetUin() uint64 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *RspBody) GetCompressFlag() uint32 {
	if x != nil && x.CompressFlag != nil {
		return *x.CompressFlag
	}
	return 0
}

func (x *RspBody) Marshal() ([]byte, error) {
	if x == nil {
		return nil, errors.New("nil message")
	}
	return proto.Marshal(x)
}
